basePath: /
definitions:
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.LoginInput:
    properties:
      email:
        type: string
      password:
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample user API using JWT authentication
  title: Go User API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: Login Data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Requires a valid JWT token. Returns user info based on token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the authenticated user's profile
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user and return JWT token
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Signup a new user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Something went wrong
          schema:
            type: string
      summary: Retrieve all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user and return the user object
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create user
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: User not found
          schema:
            type: string
      summary: Retrieve a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Update a user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
